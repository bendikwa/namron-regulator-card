{"mappings":"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","sources":["src/index.js","src/card.js","src/card.styles.js","src/editor.js"],"sourcesContent":["import { NamronRegulatorCard } from \"./card\";\r\nimport { NamronRegulatorCardEditor } from \"./editor\";\r\n\r\ncustomElements.define(\r\n    \"namron-regulator-card-dev\",\r\n    NamronRegulatorCard\r\n);\r\ncustomElements.define(\r\n    \"namron-regulator-card-dev-editor\",\r\n    NamronRegulatorCardEditor\r\n);\r\n\r\nwindow.customCards = window.customCards || [];\r\nwindow.customCards.push({\r\n    type: \"namron-regulator-card-dev\",\r\n    name: \"Namron Regulator Card\",\r\n    description: \"Simple card for Namron Regulator!\" // optional\r\n});","import { html, LitElement, nothing } from 'lit';\r\nimport styles from './card.styles';\r\nexport class NamronRegulatorCard extends LitElement {\r\n    // private property\r\n    _hass;\r\n\r\n    // internal reactive states\r\n    static get properties() {\r\n        return {\r\n            _header: { state: true },\r\n            _entity: { state: true },\r\n            _name: { state: true },\r\n            _state: { state: true },\r\n            _status: { state: true }\r\n        };\r\n    }\r\n\r\n    setConfig(config) {\r\n        this._header = config.header === \"\" ? nothing : config.header;\r\n        this._entity = config.entity;\r\n        // call set hass() to immediately adjust to a changed entity\r\n        // while editing the entity in the card editor\r\n        if (this._hass) {\r\n            this.hass = this._hass\r\n        }\r\n    }\r\n\r\n    set hass(hass) {\r\n        this._hass = hass;\r\n        this._state = hass.states[this._entity];\r\n        if (this._state) {\r\n            this._status = this._state.state;\r\n            let fn = this._state.attributes.friendly_name;\r\n            this._name = fn ? fn : this._entity;\r\n        }\r\n    }\r\n\r\n\r\n    static styles = styles;\r\n\r\n    render() {\r\n        let content;\r\n        if (!this._state) {\r\n            content = html`\r\n                <p class=\"error\">\r\n                    ${this._entity} is unavailable.\r\n                </p>\r\n            `;\r\n        } else {\r\n            content = html`\r\n                <dl class=\"dl\">\r\n                    <dt class=\"dt\">${this._name}</dt>\r\n                    <dd class=\"dd\" @click=\"${this.doToggle}\">\r\n                        <span class=\"toggle ${this._status}\">\r\n                            <span class=\"button\"></span>\r\n                        </span>\r\n                        <span class=\"value\">${this._status}</span>\r\n                    </dd>\r\n                </dl>\r\n            `;\r\n        }\r\n        return html`\r\n            <ha-card header=\"${this._header}\">\r\n                <div class=\"card-content\">\r\n                    ${content}\r\n                </div>\r\n            </ha-card>\r\n        `;\r\n    }\r\n    // event handling\r\n\r\n    doToggle(event) {\r\n        this._hass.callService(\"input_boolean\", \"toggle\", {\r\n            entity_id: this._entity\r\n        });\r\n    }\r\n\r\n    // card configuration\r\n    static getConfigElement() {\r\n        return document.createElement(\"namron-regulator-card-dev\");\r\n    }\r\n\r\n    static getStubConfig() {\r\n        return {\r\n            entity: \"input_boolean.toggletest\",\r\n            header: \"\",\r\n        };\r\n    }\r\n}","import { css } from 'lit';\r\n\r\nexport default css`\r\n    .error {\r\n        color: red;\r\n    }\r\n    .dl {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, minmax(0, 1fr));\r\n    }\r\n    .dt {\r\n        display: flex;\r\n        align-content: center;\r\n        flex-wrap: wrap;\r\n    }\r\n    .dd {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, minmax(0, auto) minmax(0, 2fr));\r\n        margin: 0;\r\n    }\r\n    .toggle {\r\n        padding: 0.6em;\r\n        border: grey;\r\n        border-radius: 50%;\r\n    }\r\n    .toggle.on { background-color: green; }\r\n    .toggle.off{ background-color: red; }\r\n    .button {\r\n        display: block;\r\n        border: outset 0.2em;\r\n        border-radius: 50%;\r\n        border-color: silver;\r\n        background-color: silver;\r\n        width: 1.4em;\r\n        height: 1.4em;\r\n    }\r\n    .value {\r\n        padding-left: 0.5em;\r\n        display: flex;\r\n        align-content: center;\r\n        flex-wrap: wrap;\r\n    }\r\n`;","import { css, html, LitElement } from 'lit';\r\nexport class NamronRegulatorCardEditor extends LitElement {\r\n    static get properties() {\r\n        return {\r\n            _config: { state: true },\r\n        };\r\n    }\r\n\r\n    setConfig(config) {\r\n        this._config = config;\r\n    }\r\n\r\n    static styles = css`\r\n            .table {\r\n                display: table;\r\n            }\r\n            .row {\r\n                display: table-row;\r\n            }\r\n            .cell {\r\n                display: table-cell;\r\n                padding: 0.5em;\r\n            }\r\n        `;\r\n\r\n    render() {\r\n        return html`\r\n            <form class=\"table\">\r\n                <div class=\"row\">\r\n                    <label class=\"label cell\" for=\"header\">Header:</label>\r\n                    <input\r\n                        @change=\"${this.handleChangedEvent}\"\r\n                        class=\"value cell\" id=\"header\" value=\"${this._config.header}\"></input>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <label class=\"label cell\" for=\"entity\">Entity:</label>\r\n                    <input\r\n                        @change=\"${this.handleChangedEvent}\"\r\n                        class=\"value cell\" id=\"entity\" value=\"${this._config.entity}\"></input>\r\n                </div>\r\n            </form>\r\n        `;\r\n    }\r\n\r\n    handleChangedEvent(changedEvent) {\r\n        // this._config is readonly, copy needed\r\n        var newConfig = Object.assign({}, this._config);\r\n        if (changedEvent.target.id == \"header\") {\r\n            newConfig.header = changedEvent.target.value;\r\n        } else if (changedEvent.target.id == \"entity\") {\r\n            newConfig.entity = changedEvent.target.value;\r\n        }\r\n        const messageEvent = new CustomEvent(\"config-changed\", {\r\n            detail: { config: newConfig },\r\n            bubbles: true,\r\n            composed: true,\r\n        });\r\n        this.dispatchEvent(messageEvent);\r\n    }\r\n}"],"names":[],"version":3,"file":"regulator.js.map"}