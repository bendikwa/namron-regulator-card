{"mappings":";AAAA,MAAM,kDAA4B;IAC9B,sEAAsE;IACtE,uBAAuB;IACvB,IAAI,KAAK,IAAI,EAAE;QACX,gDAAgD;QAChD,IAAI,CAAC,IAAI,CAAC,SAAS;YACf,IAAI,CAAC,YAAY,CAAC;;;;MAIxB,CAAC;YACK,IAAI,CAAC,UAAU,IAAI,CAAC,cAAc;QACtC;QAEA,MAAM,WAAW,IAAI,CAAC,OAAO;QAC7B,MAAM,QAAQ,KAAK,MAAM,CAAC,SAAS;QACnC,MAAM,WAAW,QAAQ,MAAM,QAAQ;QAEvC,IAAI,CAAC,QAAQ,YAAY,CAAC;mBACf,EAAE,SAAS,WAAW,EAAE,SAAS;IAChD,CAAC;IACD;IAEA,yEAAyE;IACzE,6BAA6B;IAC7B,UAAU,MAAM,EAAE;QACd,IAAI,CAAC,OAAO,QACR,MAAM,IAAI,MAAM;QAEpB,IAAI,CAAC,SAAS;IAClB;IAEA,qEAAqE;IACrE,mDAAmD;IACnD,cAAc;QACV,OAAO;IACX;AACJ;AAEA,eAAe,OAAO,yBAAyB","sources":["src/regulator.js"],"sourcesContent":["class NamronRegulatorCard extends HTMLElement {\r\n    // Whenever the state changes, a new `hass` object is set. Use this to\r\n    // update your content.\r\n    set hass(hass) {\r\n        // Initialize the content if it's not there yet.\r\n        if (!this.content) {\r\n            this.innerHTML = `\r\n        <ha-card header=\"Example-card\">\r\n          <div class=\"card-content\"></div>\r\n        </ha-card>\r\n      `;\r\n            this.content = this.querySelector(\"div\");\r\n        }\r\n\r\n        const entityId = this.config.entity;\r\n        const state = hass.states[entityId];\r\n        const stateStr = state ? state.state : \"unavailable\";\r\n\r\n        this.content.innerHTML = `\r\n      The state of ${entityId} has state ${stateStr}!\r\n    `;\r\n    }\r\n\r\n    // The user supplied configuration. Throw an exception and Home Assistant\r\n    // will render an error card.\r\n    setConfig(config) {\r\n        if (!config.entity) {\r\n            throw new Error(\"You need to define an entity\");\r\n        }\r\n        this.config = config;\r\n    }\r\n\r\n    // The height of your card. Home Assistant uses this to automatically\r\n    // distribute all cards over the available columns.\r\n    getCardSize() {\r\n        return 3;\r\n    }\r\n}\r\n\r\ncustomElements.define(\"namron-regulator-card\", NamronRegulatorCard);"],"names":[],"version":3,"file":"regulator.js.map"}